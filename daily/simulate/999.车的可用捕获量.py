#
# @lc app=leetcode.cn id=999 lang=python3
#
# [999] 车的可用捕获量
#

from typing import List

# @lc code=start


class Solution:

    def numRookCaptures(self, board: List[List[str]]) -> int:
        dir = [(-1, 0), (0, -1), (1, 0), (0, 1)]
        ans = 0

        for i, v in enumerate(board):
            for j in v:
                if j == 'R':
                    sx, sy = v.index(j), i

        for d in dir:
            tx, ty = sx+d[0], sy+d[1]

            while True:
                if tx < 0 or tx >= 8 or ty < 0 or ty >= 8 or board[ty][tx] == 'B':
                    break

                if board[ty][tx] == 'p':
                    ans += 1
                    break

                tx += d[0]
                ty += d[1]

        return ans
# @lc code=end


if __name__ == "__main__":
    assert Solution().numRookCaptures([[".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", "p", ".", ".", ".", "."], [".", ".", ".", "R", ".", ".", ".", "p"], [".", ".", ".", ".", ".", ".", ".", "."], [
        ".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", "p", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."]]) == 3
    assert Solution().numRookCaptures([[".", ".", ".", ".", ".", ".", ".", "."], [".", "p", "p", "p", "p", "p", ".", "."], [".", "p", "p", "B", "p", "p", ".", "."], [".", "p", "B", "R", "B", "p", ".", "."], [
        ".", "p", "p", "B", "p", "p", ".", "."], [".", "p", "p", "p", "p", "p", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."]]) == 0
    assert Solution().numRookCaptures([[".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", "p", ".", ".", ".", "."], [".", ".", ".", "p", ".", ".", ".", "."], ["p", "p", ".", "R", ".", "p", "B", "."], [
        ".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", "B", ".", ".", ".", "."], [".", ".", ".", "p", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."]]) == 3
